generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  usertype   UserType
  emailId    Json?
  telegramId Json?
  customerId Int?
  siteId     Int?
  createdAt  DateTime @default(now())

  customer Customer? @relation(fields: [customerId], references: [id])
  site     Site?     @relation(fields: [siteId], references: [id])

  manager    User?  @relation("UserManager", fields: [managerId], references: [id])
  managerId  Int?
  executives User[] @relation("UserManager")

  admin   User? @relation("UserAdmin", fields: [adminId], references: [id])
  adminId Int?

  admins User[] @relation("UserAdmin")

  
  customers        Customer[] @relation("UserAdmin") 
  managedCustomers Customer[] @relation("UserManager") 

  
  managedSites Site[] @relation("SiteManager")
  adminSites   Site[] @relation("SiteAdmin")

  managedDevices Device[] @relation("DeviceManager")
  adminDevices   Device[] @relation("DeviceAdmin")

  deviceId String? 
  device   Device? @relation(fields: [deviceId], references: [deviceId])

  tickets  Ticket[]
}

enum UserType {
  ADMIN
  MANAGER
  EXECUTIVE
  SUPERADMIN
}


model Customer {
  id              Int    @id @default(autoincrement())
  customerName    String @unique
  customerAddress String
  gstNumber       String
  contactName     String
  contactNumber   String
  email           String
  sites           Site[] 
  adminId         Int? 
  managerId       Int? 

  user    User[]
  
  admin   User?  @relation("UserAdmin", fields: [adminId], references: [id])
  manager User?  @relation("UserManager", fields: [managerId], references: [id])
}

model Site {
  id            Int      @id @default(autoincrement())
  customer      Customer @relation(fields: [customerId], references: [id])
  customerId    Int
  siteName      String   @unique
  siteAddress   String
  contactName   String
  contactNumber String
  contactEmail  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  device        Device[]

  
  adminId   Int?
  managerId Int?
  userId    Int?
  user      User[]

  
  admin     User?  @relation("SiteAdmin", fields: [adminId], references: [id])
  manager   User?  @relation("SiteManager", fields: [managerId], references: [id])
}


model Device {
  id             Int    @id @default(autoincrement())
  deviceId       String @unique
  deviceName     String
  site           Site   @relation(fields: [siteId], references: [id])
  siteId         Int
  deviceType     String
  deviceIp       String
  devicePort     String
  portCount      String
  emailId        Json?
  telegramId     Json?
  deviceUsername String
  devicePassword String

  managerId Int? 
  adminId   Int? 

  
  admin   User? @relation("DeviceAdmin", fields: [adminId], references: [id])
  manager User? @relation("DeviceManager", fields: [managerId], references: [id])

  user User[] 
}



model MikroTik {
  id        Int      @id @default(autoincrement())
  identity  String
  comment   String
  status    String
  since     String
  createdAt DateTime @default(now())
}


model Ticket {
  id       Int    @id @default(autoincrement())
  ticketNo String
  category String
  subject  String
  query    String
  status   String
  remark  Json?
  userId   Int?
  createdAt  DateTime @default(now())
  user     User?  @relation(fields: [userId], references: [id])
}
